def COMMIT_ID
def ZIP_FILE_NAME
pipeline {
    agent any  
    environment {
        GO_VERSION = '1.22.5'  // Specify the Go version you are using
        NEXUS_CREDENTIALS_ID = 'nexus-jenkins'
        NEXUS_URL = 'https://nexus.u-cloudsolutions.xyz'
        NEXUS_REPOSITORY = 'student-repository'
        GROUP_ID = 'com.artificial.GO'
        ARTIFACT_ID = 'artifact'

    }
    stages { 
        stage ("started "){
            steps {
                slackSend channel: "#jenkins-notifications", message: " STARTED:job  '${env.JOB_NAME} ${env.BUILD_NUMBER}' (${env.BUILD_URL})"
            }
        } 
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "main"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'authentification-gitlab', url: 'https://gitlab.u-cloudsolutions.xyz/summary-internship/2024/wissem-sghaier/my-gin-project.git']]
                    ]) 
                    sh "git rev-parse --short HEAD > commit_hash.txt"
                    COMMIT_ID = readFile('commit_hash.txt').trim()
                    ZIP_FILE_NAME = "${ARTIFACT_ID}-${COMMIT_ID}.zip"
                    echo "Commit Hash: ${COMMIT_ID}"
                    echo "Zip File Name: ${ZIP_FILE_NAME}"
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "checkout of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "checkout  of pipeline  failed!")
                }
            }
        }
        stage('Setup Go Environment') {
            steps {
                script {
                    echo "Setting up Go environment"
                    sh '''
                        curl -LO https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
                        sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
                        export PATH=/usr/local/go/bin:$PATH
                        go version
                    '''
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Setup Go Environment of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Setup Go Environment  of pipeline  failed!")
                }
            }
        }
        stage('List Files') {
            steps {
                script {
                    echo "Listing files in the workspace"
                    sh 'ls -al'
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "List Files of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "List Files  of pipeline  failed!")
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "Downloading Go modules"
                    sh '''
                        export PATH=/usr/local/go/bin:$PATH
                        
                        ls -al
                        go mod download
                    '''
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Install Dependencies of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Install Dependencies  of pipeline  failed!")
                }
            }
        }

        stage('Build Project') {
            steps {
                script {
                    echo "Building the Go project"
                    sh '''
                        export PATH=/usr/local/go/bin:$PATH
                        go build -o main .
                    '''
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Build Project of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Build Project  of pipeline  failed!")
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running unit tests"
                    sh '''
                        export PATH=/usr/local/go/bin:$PATH
                        go test -v ./...
                    '''
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Run Unit Tests of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Run Unit Tests  of pipeline  failed!")
                }
            }
        }
        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube-scanner'
                    withSonarQubeEnv('sonarqube-container') {
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=project-go \
                        -Dsonar.projectName=project-go \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarqube.u-cloudsolutions.xyz \
                        -Dsonar.login=squ_b730e6c811798750f5442b5ec90950a58600c316 \
                        -Dsonar.exclusions=vendor/**
                        """
                    }
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Code Quality Check via SonarQube of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Code Quality Check via SonarQube  of pipeline  failed!")
                }
            }
        }
    stage("Quality Gate") {
        steps {
            script {
                sleep 60
                def qualityGateResult = waitForQualityGate abortPipeline: true
                if (qualityGateResult.status != 'OK') {
                    echo "Quality Gate failed: ${qualityGateResult.status}"
                    error "Pipeline aborted due to Quality Gate failure."
                }
                else {
                    echo "Quality Gate passed."
                }
            }
        }

        post 
        {
            success {
                slackSend (color: 'good', message: "Quality Gate of pipeline  succeeded!")
            }
                failure {
                    slackSend (color: 'danger', message: "Quality Gate  of pipeline  failed!")
            }
        }
    }
    stage('Package Project') {
        steps {
            script {
                echo "Packaging project as ${ZIP_FILE_NAME}..."
                sh "sudo apt-get install -y zip"
                echo "Packaging project as ${ARTIFACT_ID}-${COMMIT_ID}.zip..."
                    sh """
                    zip -r ${ZIP_FILE_NAME} .
                    """
            }
        }
        post {
                success {
                    slackSend (color: 'good', message: "Package Project of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Package Project  of pipeline  failed!")
                }
            }
    }
    stage('Upload to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    script {
                        def zipFileName = "${ARTIFACT_ID}-${COMMIT_ID}.zip"
                        def uploadUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID.replace('.', '/')}/${ARTIFACT_ID}/${COMMIT_ID}/${zipFileName}"
                        
                        echo "Uploading ${zipFileName} to Nexus..."
                        sh """
                        curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} \
                             --upload-file ${zipFileName} \
                             "${uploadUrl}"
                        """
                    }
                }
            }
            post {
                success {
                    slackSend (color: 'good', message: "Upload to Nexus of pipeline  succeeded!")
                }
                failure {
                    slackSend (color: 'danger', message: "Upload to Nexus  of pipeline  failed!")
                }
            }
        }   
    }
    post {
        always {      
            cleanWs()      
        }  
        success {
            slackSend channel: '#jenkins-alerts-pfe-2023', message: " build ${currentBuild.result} for job ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the build at ${env.BUILD_URL}"
        }
        failure {
            slackSend channel: '#jenkins-alerts-pfe-2023', message: "Build ${currentBuild.result} for ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the build at ${env.BUILD_URL}"  
        }
    }       
}
